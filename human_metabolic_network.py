# -*- coding: utf-8 -*-
"""human metabolic network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q0TIOAdlaL29r2k9p5G9SqtYIzEgysiw
"""

!apt-get install libcairo2-dev libjpeg-dev libgif-dev
!pip install pycairo
import cairo
!pip install python-igraph
import igraph, pandas, matplotlib, numpy

!wget https://csx46.s3-us-west-2.amazonaws.com/hsmetnet.txt

df = pandas.read_csv('hsmetnet.txt', sep='\t', header=None, names=['source', 'target'])
df = df.drop_duplicates()
df.head(n=6)

from igraph import Graph
edges_list = df.values.tolist()

g = Graph.TupleList(edges_list, directed=True)

print(g.summary())

vertices = [v["name"] for v in g.vs]

metabolites = set([v for v in vertices if "REACTION" not in v])
num_metabolites = len(metabolites)

reactions = set([v for v in vertices if "REACTION" in v])
num_reactions = len(reactions)

num_edges = g.ecount()

print("Number of distinct metabolites:", num_metabolites)
print("Number of reactions:", num_reactions)
print("Number of edges:", num_edges)

from operator import itemgetter

vertex_degrees = [(v["name"], g.degree(v.index)) for v in g.vs]

sorted_vertices = sorted(vertex_degrees, key=itemgetter(1), reverse=True)

top_six = sorted_vertices[:6]

for i, (name, degree) in enumerate(top_six, start=1):
    print(f"{i}. {name} with degree {degree}")

import matplotlib.pyplot as plt

xs, ys = zip(*[(left, count) for left, _, count in g.degree_distribution().bins() if count > 0])

plt.loglog(xs, ys, linestyle='-', marker=None)
plt.title('Log-Log Plot of Degree Distribution')
plt.xlabel('Degree')
plt.ylabel('Count')
plt.show()

igraph.statistics.power_law_fit(g.degree()).alpha

import numpy as np

g_undirected = g.as_undirected()

components = g_undirected.connected_components(mode="weak")

component_sizes = components.sizes()
giant_component_index = np.argmax(component_sizes)

giant_component = components.subgraph(giant_component_index)

metabolite_vertex_indices = [v.index for v in giant_component.vs if "REACTION" not in v["name"]]

shortest_paths = giant_component.shortest_paths(source=metabolite_vertex_indices, target=metabolite_vertex_indices, mode=igraph.ALL)

shortest_paths_array = np.array(shortest_paths)

non_zero_distances = shortest_paths_array[shortest_paths_array != 0]

finite_distances = non_zero_distances[np.isfinite(non_zero_distances)]

avgd = np.mean(finite_distances)

print(round(avgd, 2))

finite_distances = shortest_paths_array[np.isfinite(shortest_paths_array)]

maximum_distance = np.max(finite_distances)

print(maximum_distance)

metabolite_vertex_indices = [v.index for v in g.vs if "REACTION" not in v["name"]]

metabolite_betweenness = g.betweenness(vertices=metabolite_vertex_indices, directed=True)

metabolite_names = [g.vs[index]["name"] for index in metabolite_vertex_indices]
metabolite_betweenness_dict = dict(zip(metabolite_names, metabolite_betweenness))

M = len(metabolite_vertex_indices)
betweenness = np.array(g.betweenness(vertices=metabolite_vertex_indices, directed=True))
normalized_betweenness = betweenness / (M**2)

degrees = np.array(g.degree(metabolite_vertex_indices))

valid_indices = np.where((degrees > 0) & (normalized_betweenness > 0)) # avoid log(0)

x = degrees[valid_indices]
y = normalized_betweenness[valid_indices]

plt.scatter(x, y)
plt.xscale('log')
plt.yscale('log')
plt.xlabel('Vertex Degree (log scale)')
plt.ylabel('Normalized Betweenness Centrality (log scale)')
plt.title('Betweenness Centrality vs. Vertex Degree on Log-Log Scale')
plt.show()

k2_indices = np.where(degrees == 2)[0]

k2_betweenness = normalized_betweenness[k2_indices]

max_index_k2 = k2_indices[np.argmax(k2_betweenness)]

highest_betweenness = g.vs[metabolite_vertex_indices[max_index_k2]]["name"]

print(highest_betweenness)